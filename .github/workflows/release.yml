name: Release Pipeline

on:
  push:
    branches: [master]

permissions:
  contents: write
  packages: write

jobs:
  test-and-lint:
    name: Test and Lint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Check formatting
        run: npm run format:check

      - name: Run tests
        run: npm run test

      - name: Run tests with coverage
        run: npm run test:coverage

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  release:
    name: Creating Release
    runs-on: ubuntu-latest
    needs: test-and-lint
    if: github.ref == 'refs/heads/master'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Determine version bump type
        id: bump_type
        run: |
          TITLE="${{ github.event.pull_request.title || github.event.head_commit.message }}"
          if echo "$TITLE" | grep -iq "(major)"; then
            echo "type=major" >> $GITHUB_OUTPUT
          elif echo "$TITLE" | grep -iq "(minor)"; then
            echo "type=minor" >> $GITHUB_OUTPUT
          else
            echo "type=patch" >> $GITHUB_OUTPUT
          fi

      - name: Bump version
        id: bump_version
        run: |
          NEW_VERSION=$(npm version ${{ steps.bump_type.outputs.type }} --no-git-tag-version)
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Commit version bump
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add package.json package-lock.json
          git commit -m "chore(release): bump version to ${{ steps.bump_version.outputs.new_version }}"
          git push origin HEAD:${{ github.ref_name }}

      - name: Build project
        run: npm run build

      - name: Publish to NPM
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Generate changelog
        id: changelog
        run: |
          # Descobre Ãºltima tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            echo "No previous tag found, using full history."
            LOG=$(git log --pretty=format:"- %s (%h)" )
          else
            LOG=$(git log $LAST_TAG..HEAD --pretty=format:"- %s (%h)")
          fi

          echo "log<<EOF" >> $GITHUB_OUTPUT
          echo "$LOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.bump_version.outputs.new_version }}
          release_name: Release ${{ steps.bump_version.outputs.new_version }}
          body: |
            ðŸš€ Automated release from CI/CD pipeline

            ## Changelog
            ${{ steps.changelog.outputs.log }}
